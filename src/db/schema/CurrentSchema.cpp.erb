<%#
	This file should be processed with erb -T 1 from the startkladde root 
	directory. Usually, this is done by make.
%>
<%
	require 'yaml'
	filename='src/db/migrations/current_schema.yaml'
	schema=YAML.load_file(filename)

	tables=schema['tables']
	numOperations=tables.size
%>

/*
 * This file has been autogenerated from CurrentSchema.cpp.erb
 * on <%= Time.new.strftime('%Y-%m-%d %H:%M:%S') %>, using the data from
 * <%= filename %>.
 */

#include <QList>

#include "src/db/schema/CurrentSchema.h"
#include "src/db/schema/spec/ColumnSpec.h"

CurrentSchema::CurrentSchema (Interface &interface):
	Schema (interface)
{
}

CurrentSchema::~CurrentSchema ()
{
}

void CurrentSchema::up (OperationMonitorInterface monitor)
{
	QList <ColumnSpec> columns;
	QList <IndexSpec> indexes;
	
<% progress=-1 %>
<% schema['tables'].each do |table| %>
<% table_name=table['name'] %>

	monitor.progress (<%= progress+=1 %>, <%= numOperations %>, "<%= "Anlegen: #{table_name}" %>");

	columns.clear ();
<% table['columns'].each do |column| %>
<%
	column_name=column['name'];
	column_type=column['type'];
	column_null=column['nullok'];
	if !["YES", "NO"].include? column_null;
		raise "Unknown value for column.null: #{column_null}";
	end;
	column_extra=column['extra'] || ""
	column_primary_key=column['primary_key']
	
	column_attributes=[]
	column_attributes << column_extra  unless column_extra.strip==""
	column_attributes << "NOT NULL"    if     column_null=="NO"
	column_attributes << "PRIMARY KEY" if     column_primary_key
%>
	columns << ColumnSpec ("<%= column_name %>", "<%= column_type %>", "<%= column_attributes.join(' ') %>");
<% end %>

	indexes.clear ();
<% table['indexes'].each do |index| %>
<%
	index_name=index['name']
	index_columns=index['columns']
%>
	indexes << IndexSpec ("<%= table_name %>", "<%= index_name %>", "<%= index_columns %>");
<% end if table['indexes'] %>

	createTable ("<%= table['name'] %>", columns, indexes);

<% end %>

	monitor.progress (<%= numOperations %>, <%= numOperations %>, "Fertig");
}

void CurrentSchema::down (OperationMonitorInterface monitor)
{
	(void)monitor;
}

QList<quint64> CurrentSchema::getVersions ()
{
	QList<quint64> versions;

<% schema['versions'].each do |version| %>
	versions << <%= version %>ll;
<% end %>
	
	return versions;
}
