= Database schema and migrations

== Summary

The database is created from the "current schema". Changes in the database
structure are implemented using migrations. The "current schema" is
autogenerated. To add a migration, use ./script/generate_migration.rb. To
regenerate the current schema (must be done after a migration is added), call
script/update_current_schema from the build directory. Migrations and the schema
are only used through the migrator, which keeps track of applied migrations.

Note: The migrations are implemented in a way similar to Rails.

== Data types

For boolean types, tinyint(1) is used (as in rails). 0 means false, everything
else means true. An enum could be used with MySQL, but that is not supported by
SQLite and the interpretation would be poorly defined.

For enum types, string is used. Enum is not used as it is not supported by
MySQL and prone to errors when values are added or changed. Integers are also
error prone.


== Migrations

Changes in the database definition (the "schema") are defined by "migrations".
Individual migrations, implementations of the abstract class Migration, are
located in src/db/migrations/ (as opposed to src/db/migration/ which contains
the generic classes). A migration has a "version" (an integer number; we use a
timestamp, like "20100216135637") and a "name", like "add_launch_methods". The
"full name" of a migration is the version and the name, combined by an
underscore, like "20100216135637_add_launch_methods".

Migrations can perform ("apply") a change ("up") and - usually - undo ("revoke)
it ("down"). Invoking the up or down method of a migration is called "running"
the migration. Migrations can only be run in the proper order, that is,
applying the next migration or revoking the last migration that has been
applied.

Migrations are usually run by the "migrator" (Migrator class) and should not be
used directly.
The migrator also keeps track of which migrations have been applied by storing
the version numbers of all applied migrations in the "schema_migrations" table.
When revoking a migration, its version number is removed from the migrations
table.

The version of the database is the version of the latest migration applied. A
database with an empty or missing migrations table has the version 0.

To add a new migration, use the script ./script/generate_migration.rb (call
without arguments for usage instructions) from the source directory. This will
automatically generate the timestamp and add a .cpp and a .h file in
src/db/migrations/. Follow the instruction printed by the script - it is
important to also update the current schema.

Migrations can be manually run by using ./startkladde <action>, where <action>
is db:up (applies the next migration), db:down (revokes the last migration) or
db:migration (applies all pending migrations). This is done using the migrator.
Note that migrating down usually incurs a loss of data as tables or columns are
removed.

Note that a migration that fails leaves the database in an inconsistent state
and requires manual intervention. Also, a failed migration cannot be rolled
back, so a backup should be made before running any migrations.


== The migration factory

A migration is created by a migration factory (MigrationFactory class), given
its version. A list of available migrations can be obtained from the factory.

The migrations are registered with the migration factory using the registration
pattern. 


== Schema

The "current schema" is used to create a fresh database. It is defined in the
class CurrentSchema. This is an implementation of Schema, an abstract subclass
of Migration, which also provides a list of migration versions that the schema
was generated from.

As with other migrations, the current schema is applied ("loaded") by the
migrator and should not be used directly.

The current schema is automatically generated in build/CurrentSchema.cpp at
compile time from the template src/db/schema/CurrentSchema.cpp.erb, using the
schema definition from src/db/migrations/current_schema.yaml.

This schema definition is generated by reading back ("dumping") the database
schema after applying all migrations. This is done by the SchemaDumper class.
Since this requires accessing the database, it is not automatically done at
compile time and the current_schema.yaml is placed under version control.

The current_schema.yaml can be updated by using "make update_current_schema".
This compiles the program, applies all pending migrations and dumps the schema.
Note that before doing this, you must clear the database (./startkladde
db:clear) to prevent inconsistencies between the migrations and the schema in
case the schema was changed manually. 
 
The schema can also be dumped manually (without applying the migrations) by
./startkladde db:dump.


== Files ==

Autogenerated files - current schema:
* build/CurrentSchema.cpp
  * generated by erb (called directly from Makefile)
  * uses template src/db/schema/CurrentSchema.cpp.erb
  * loads src/db/migrations/current_schema.yaml
* src/db/migrations/current_schema.yaml
  * contains a description of the current schema in YAML format
  * created by the SchemaDumper after applying all migrations

Other template files:
* src/db/migrations/Migration.cpp.erb
  * template for new migrations
* src/db/migrations/Migration.h.erb
  * template for new migrations
